// Generated by CoffeeScript 1.4.0
(function() {
  var async;

  module.exports = async = (function() {
    var key, key2, _ref;

    async.whilst = function(test, iterator, callback) {
      var _this;
      _this = this;
      return test() ? iterator(function(err){return err ? callback(err) : _this.whilst(test,iterator,callback)}) : callback();
    };

    async.begin = function() {
      return new async();
    };

    function async(beginning_result) {
      this.beginning_result = beginning_result != null ? beginning_result : void 0;
      this.a = [];
      this.beginning_length = 0;
      this.processed = 0;
    }

    async.prototype._call = function(result, err) {
      var a;
      if (err) {
        a = this.a[this.a.length - 1];
        this.a = [];
      } else if (this.a.length) {
        a = this.a[0];
      }
      if (typeof a !== 'undefined') {
        return a.call((function() {}), result, err);
      }
    };

    async.prototype._pop = function(parallel, result, err) {
      var current, next,
        _this = this;
      current = this.a.shift();
      next = this.a[0];
      if (this.beforeEach_callback != null) {
        this.beforeEach_callback(result, err);
      }
      return function(result, err) {
        _this.processed++;
        if (err) {
          return _this._call(result, err);
        }
        if (_this.afterEach_callback != null) {
          _this.afterEach_callback(result, err);
        }
        if (!parallel || _this.processed === _this.beginning_length) {
          while (_this._call(result, err) && parallel) {}
        }
      };
    };

    async.prototype._push = function(cb, parallel) {
      var _this = this;
      this.beginning_length++;
      this.a.push(function(result, err) {
        cb.call(_this._pop(parallel, result, err), result, err);
        if (parallel && 1 !== _this.a.length) {
          _this._call(result, err);
        }
        return parallel;
      });
      return this;
    };

    async.prototype.serial = function(cb) {
      return this._push(cb, false);
    };

    async.prototype.parallel = function(cb) {
      return this._push(cb, true);
    };

    async.prototype["do"] = function(cb) {
      return this._push(cb, !!cb.length);
    };

    async.prototype.end = function(cb) {
      var _this = this;
      this.a.push(function(result, err) {
        if (_this.afterEach_callback != null) {
          _this.afterEach_callback(result, err);
        }
        if (err && (_this.error_callback != null)) {
          _this.error_callback(err);
        } else if (_this.success_callback != null) {
          _this.success_callback(result);
        }
        return cb.call((function() {}), result, err);
      });
      this._call(this.beginning_result, null);
      return this;
    };

    for (key in _ref = {
      'beforeAll': ['before'],
      'beforeEach': null,
      'afterEach': ['between', 'inbetween'],
      'error': ['catch', 'rescue'],
      'do': ['then'],
      'success': null,
      'end': ['finally', 'ensure', 'afterAll', 'after', 'complete', 'done']
    }) {
      if (typeof async.prototype[key] === 'undefined') {
        (function(key) {
          return async.prototype[key] = function(cb) {
            this[key + '_callback'] = cb;
            return this;
          };
        })(key);
      }
      if (_ref[key] != null) {
        for (key2 in _ref[key]) {
          async.prototype[_ref[key][key2]] = async.prototype[key];
        }
      }
    }

    return async;

  })();

}).call(this);
