// Generated by CoffeeScript 1.4.0
(function() {
  var async,
    __hasProp = {}.hasOwnProperty;

  !(function(name, context, definition) {
    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {
      return module.exports = definition;
    } else {
      return context[name] = definition;
    }
  })('async', this, async = (function() {
    var key, key2, _fn, _ref;

    function async(beginning_result) {
      if (typeof this.serial === 'undefined') {
        return new async(arguments[0]);
      } else {
        this.a = [];
        this.beginning_result = beginning_result != null ? beginning_result : {};
        this.beginning_length = 0;
        this.processed = 0;
      }
    }

    async.prototype._apply = function(args) {
      if (this.a.length) {
        return (args[0] ? this.a.splice(0, this.a.length).shift() : this.a[this.a.length - 1]).apply((function() {}), args);
      }
    };

    async.prototype._pop = function(parallel) {
      var _this = this;
      this.a.pop();
      return function() {
        _this.processed++;
        if (arguments[0]) {
          return _this._apply(arguments);
        }
        if (_this.afterEach_callback != null) {
          _this.afterEach_callback.apply(_this, arguments);
        }
        if (!parallel || _this.processed === _this.beginning_length) {
          while (_this._apply(arguments) && parallel) {}
        }
      };
    };

    async.prototype._push = function(args, parallel) {
      var dont_end, key, _fn, _ref,
        _this = this;
      if (Object.prototype.toString.call(args[0]) === '[object Function]') {
        args[0] = [args[0]];
        dont_end = true;
      }
      _ref = args[0];
      _fn = function(cb, parallel) {
        _this.beginning_length++;
        return _this.a.push(function() {
          var next;
          if (_this.beforeEach_callback != null) {
            _this.beforeEach_callback.apply(_this, arguments);
          }
          args = Array.prototype.slice.apply(arguments).slice(1);
          next = _this._pop(parallel);
          args.push(next);
          cb.apply(next, args);
          if (parallel && 1 !== _this.a.length) {
            _this._apply(arguments);
          }
          return parallel;
        });
      };
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        _fn(args[0][key], parallel === null ? !args[0][key].length : parallel);
      }
      if (dont_end == null) {
        this.end(typeof args[1] === 'function' ? args[1] : function() {});
      }
      return this;
    };

    async.prototype.serial = function() {
      return this._push(arguments, false);
    };

    async.prototype.parallel = function() {
      return this._push(arguments, true);
    };

    async.prototype.then = function() {
      return this._push(arguments, null);
    };

    async.prototype.end = function(cb) {
      var _this = this;
      this.a.push(function() {
        if (_this.afterEach_callback != null) {
          _this.afterEach_callback.apply(_this, arguments);
        }
        if (arguments[0] && (_this.error_callback != null)) {
          _this.error_callback.apply(_this, arguments);
        } else if (_this.success_callback != null) {
          _this.success_callback.apply(_this, arguments);
        }
        return cb.apply((function() {}), arguments);
      });
      this.a.reverse();
      this._apply([null, this.beginning_result]);
      return this;
    };

    _fn = function(key) {
      if (typeof async.prototype[key] === 'undefined') {
        async.prototype[key] = function(cb) {
          this[key + '_callback'] = cb;
          return this;
        };
      }
      return async[key] = function() {
        var a;
        return (a = new async)[key].apply(a, arguments);
      };
    };
    for (key in _ref = {
      'begin': ['new', 'try'],
      'beforeAll': ['before'],
      'beforeEach': null,
      'serial': ['series', 'blocking', 'waterfall'],
      'parallel': ['nonblocking'],
      'then': ['do', 'auto'],
      'afterEach': ['between', 'inbetween'],
      'error': ['catch', 'rescue'],
      'success': ['else'],
      'end': ['finally', 'ensure', 'afterAll', 'after', 'complete', 'done']
    }) {
      _fn(key);
      if (_ref[key] != null) {
        for (key2 in _ref[key]) {
          async.prototype[_ref[key][key2]] = async.prototype[key];
          async[_ref[key][key2]] = async[key];
        }
      }
    }

    async.whilst = function(test, iterator, callback) {
      var _this = this;
      if (test()) {
        iterator(function(err) {
          if (err) {
            return callback(err);
          } else {
            return _this.whilst(test, iterator, callback);
          }
        });
      } else {
        callback();
      }
    };

    return async;

  })());

}).call(this);
